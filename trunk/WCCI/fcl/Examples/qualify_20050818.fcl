FUNCTION_BLOCK qualify

VAR_INPUT
	scoring : REAL;				// Account owner's scoring
	sel : REAL;					// Social economic level
	occupation_type: REAL;		// enum_occupation_type.rid 
	city: REAL;					// City (actually Zip code)
	scoring_partner : REAL;		// Partner's scoring
END_VAR

VAR_OUTPUT
	qualify : REAL;				// Qualify
	credLimMul : REAL;			// Credit limit multiplier
END_VAR

// Scoring : [0,1000]
FUZZIFY scoring
	TERM veryHigh := trape 850 900 1000 1000;
	TERM high := trape 650 700 900 1000;
	TERM midHigh := trape 500 550 700 900;
	TERM midLow := trape 380 420 550 700;
	TERM low := trape 0 0 420 550;
END_FUZZIFY

// Social economic level: {A,B,C1,C2,C3,D1,D2,E}
FUZZIFY sel
	TERM a := sigm 0.01 4500; // Use sigm
	TERM b := trape 2000 3000 5000 10000;
	TERM c1 := trape 1300 2000 3000 5000;
	TERM c2 := trape 900 1300 2000 3000;
	TERM c3 := trape 600 900 1300 2000;
	TERM d1 := trape 400 600 900 1300;
	TERM low := trape 0 0 600 900;
END_FUZZIFY

// City (zip code < 1900 => BsAs)
FUZZIFY city
	TERM bsas := trape 0 0 1899 1900;
	TERM other := trape 1900 1900 10000 10000;
END_FUZZIFY

// Occupation type rid
// Good ones:   { Hired State Employee, Hired Private Employee, Contracted State Employee}
// Rids:		{ 9, 10 ,11 }
FUZZIFY occupation_type
	TERM good := trape 8.5 9 11 11.5;
	TERM other_1 := trape 0 0 8 8.5;
	TERM other_2 := trape 11.5 12 20 20;
END_FUZZIFY

// Partner's Scoring : [0,1000]
FUZZIFY scoring_partner
	TERM midLow := trape 0 420 550 700;
	TERM low := trian 0 0 420;
END_FUZZIFY

// Qualify : {accept,manual_accept,manual_reject,reject}
DEFUZZIFY qualify
	TERM accept := trape 2 3 4 4;
	TERM manual_accept := trape 1 2 3 4;
	TERM manual_reject := trape 0 1 2 3;
	TERM reject := trape 0 0 1 2;
	ACCU : SUM;
	METHOD : COG;
	DEFAULT := 0;
END_DEFUZZIFY

// Credit limit multiplier
DEFUZZIFY credLimMul
	TERM veryHigh := trape 0.6 0.7 1 1;
	TERM high := trape 0.4 0.5 0.6 0.7;
	TERM midHigh := trape 0.2 0.3 0.4 0.5;
	TERM midLow := trape 0.1 0.15 0.2 0.3;
	TERM low := trape 0 0 0.1 0.15;
	ACCU : SUM;
	METHOD : COG;
	DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;
	ACT : MIN;
	// Scoring rules
	RULE 1 : IF scoring IS veryHigh THEN qualify IS accept , credLimMul IS veryHigh;
	RULE 2 : IF scoring IS high THEN qualify IS accept , credLimMul IS high;
	RULE 3 : IF scoring IS midHigh THEN qualify IS manual_accept , credLimMul IS midHigh;
	RULE 4 : IF scoring IS midLow THEN qualify IS manual_reject , credLimMul IS midLow;
	RULE 5 : IF scoring IS low THEN qualify IS reject , credLimMul IS low;
	// Social economic level
	RULE  6 : IF sel IS a OR sel IS b THEN qualify IS accept , credLimMul IS veryHigh;
	RULE  7 : IF sel IS c1 THEN qualify IS accept , credLimMul IS high;
	RULE  8 : IF sel IS c2 THEN qualify IS manual_accept , credLimMul IS midHigh;
	RULE  9 : IF sel IS c3 THEN qualify IS manual_reject , credLimMul IS midLow;
	RULE 10 : IF sel IS d1 OR sel IS low THEN qualify IS reject , credLimMul IS low;
	// Ocupation type
	RULE 11 : IF NOT occupation_type IS good THEN qualify IS reject , credLimMul IS low;
	// City
	RULE 12 : IF city IS other THEN qualify IS reject , credLimMul IS low;
	// Partner's scoring
	RULE 12 : IF scoring_partner IS midLow THEN qualify IS manual_reject , credLimMul IS midLow;
	RULE 13 : IF scoring_partner IS low THEN qualify IS reject , credLimMul IS low;
END_RULEBLOCK

END_FUNCTION_BLOCK

